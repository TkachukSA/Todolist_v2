{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ResultCodeStatuses","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","id","put","todolistId","taskId","taskTitile","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","initialized","setInitializedAC","changeTodolistEntityStatusAC","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","Succes","action","updateTaskAC","catch","err","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","isLoginIn","auth","removeTaskAC","removeTaskTC","addTaskAC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","isLiginIn","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutChanged","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","textAlign","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8358cbf6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '7866738e-c5bf-440e-864d-4cc467150876'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport type loginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: loginParamsType) {\r\n        let promise = instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n        return promise\r\n    }, me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum ResultCodeStatuses {\r\n    Succes = 0,\r\n    Error = 1,\r\n    Captcha = 10,\r\n\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {Dispatch} from \"redux\";\n\nimport { ResponseType } from '../api/todolists-api';\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n\n    dispatch(setAppErrorAC(error.message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\nimport {authAPI, loginParamsType} from \"../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: loginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }\n    ).catch((err) => {\n        handleServerNetworkError(err, dispatch)\n        console.log(err)\n    })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout().then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }\n    ).catch((err) => {\n        handleServerNetworkError(err, dispatch)\n        console.log(err)\n    })\n}\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/todolists-api\";\nimport {setIsLoggedInAC} from \"../login/auth-reducer\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    error: null | string\n    initialized: boolean\n}\n\nconst initialState: InitialStateType = {\n    status: 'loading',\n    error: null,\n    initialized: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        case \"APP/SET-initialized\": {\n            return {...state, initialized: action.initialized}\n        }\n        default:\n            return state\n    }\n}\n\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType | SetInitializedActionType\n\nexport const setInitializedTC = () => (dispatch: Dispatch) => {\n    authAPI.me()\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(true))\n            } else {\n\n            }\n            dispatch(setInitializedAC(true))\n        })\n}\n\nexport type  SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type  SetInitializedActionType = ReturnType<typeof setInitializedAC>\n\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setInitializedAC = (initialized: boolean) => ({type: 'APP/SET-initialized', initialized} as const)\n\nexport type  SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)","import {ResultCodeStatuses, todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case 'CHANGR_TODOLIST_ENTITY_STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: \"CHANGR_TODOLIST_ENTITY_STATUS\",\r\n    entityStatus,\r\n    id\r\n} as const)\r\nexport type  changeTodolistEntityStatusStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n            })\r\n            .catch((err) => {\r\n                handleServerNetworkError(err, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodeStatuses.Succes) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                }\r\n\r\n            }).catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodeStatuses.Succes) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC(\"succeeded\"))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((err) => {\r\n                handleServerNetworkError(err, dispatch)\r\n                /*dispatch(setAppErrorAC(err.message))\r\n                dispatch(setAppStatusAC(\"succeeded\"))*/\r\n            }).catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n            console.log(err)\r\n        })\r\n\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(id, 'loading'))\r\n\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                dispatch(changeTodolistEntityStatusAC(id, 'succeeded'))\r\n            }).catch((err) => {\r\n            handleServerNetworkError(err, dispatch)\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | changeTodolistEntityStatusStatusType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {\r\n    ResultCodeStatuses,\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }).catch((err)=>{\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        }).catch((err)=>{\r\n        handleServerNetworkError(err, dispatch)\r\n    })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if(res.data.resultCode === ResultCodeStatuses.Succes) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            }else {\r\n                handleServerAppError(res.data, dispatch )\r\n            }\r\n\r\n        }).catch((err)=>{\r\n        handleServerNetworkError(err.message, dispatch)\r\n       /* dispatch(setAppErrorAC(err.message))\r\n        dispatch(setAppStatusAC(\"succeeded\"))*/\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if(res.data.resultCode === ResultCodeStatuses.Succes){\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                }else {\r\n                    handleServerAppError(res.data, dispatch )\r\n                }\r\n            }).catch((err)=>{\r\n            handleServerNetworkError(err, dispatch)\r\n        })\r\n\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\ntype empt = {\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport { IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus === 'loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.entityStatus === 'loading'}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const  a = props.entityStatus\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.entityStatus === \"loading\"} />\r\n        : <span onDoubleClick={activateEditMode} >{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} entityStatus={props.entityStatus} />\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} entityStatus={props.entityStatus}/>\r\n\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                entityStatus={props.entityStatus}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoginIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                entityStatus={tl.entityStatus}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n\n    const dispatch = useDispatch()\n    const error = useSelector<AppRootStateType, string| null>( state => state.app.error)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../app/store\";\nimport {Redirect} from 'react-router-dom';\n\nexport const Login = () => {\n\n    const isLiginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n\n    const formik = useFormik({\n        validate: (values) => {\n            if (!values.email) {\n                return {\n                    email: 'email is reqired'\n                }\n            }\n            if (!values.password) {\n                return {\n                    password: 'password is reqired'\n                }\n            }\n        },\n\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values));\n        },\n\n    })\n    if (isLiginIn) {\n        return <Redirect to={'/'}/>\n    }\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n\n                        {formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                checked={formik.values.rememberMe}\n                                {...formik.getFieldProps('rememberMe')}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setInitializedTC} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Route, Switch, Redirect} from 'react-router-dom'\r\nimport {Login} from \"../login/Login\";\r\nimport {logoutTC} from \"../login/auth-reducer\";\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const initialized = useSelector<AppRootStateType, boolean>((state) => state.app.initialized)\r\n    const isLoginIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(setInitializedTC())\r\n    }, [])\r\n\r\n    const logoutChanged = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!initialized) {\r\n        return <div style={{position: \"absolute\", top: '30%', width: '100%', textAlign: \"center\"}}><CircularProgress\r\n            color=\"secondary\"/></div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoginIn && <Button color=\"inherit\" onClick={logoutChanged}>Logout</Button>}\r\n                </Toolbar>\r\n\r\n\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n                <ErrorSnackbar/>\r\n\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>Page non found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}